 use insy;

db.projects.updateMany(
   {},
   { $set : { reviews : []} }
);

db.projects.updateMany(
   { projectType : "REQUEST_FUNDING_PROJECT" },
   {
      $push : {
          reviews : { $each : [3,3,5,2] }   
      }   
   }
);

db.projects.updateMany(
   { projectType : "RESEARCH_FUNDING_PROJECT" },
   {
       $push : {
           reviews : { $each : [3,3,3, 4] }   
       }   
   }
);

db.projects.updateMany(
   { projectType : "MANAGEMENT_PROJECT" },
   {
      $push : {
          reviews : { $each : [1,1,3,2] }   
      }
   }
);

// -- ----------------------------------------------------------------------------------------- --
// --  1.Beispiel) aggregate 
// -- ----------------------------------------------------------------------------------------- --

//  db.<collection>.aggregate([
//      { <pipelineStep> },
//      ...
//
//  ]);

// <pipelineStep> : { $pipelineOperator : ... }
//              
//  $pipelineOperator : <documentOperator> || <stuctureOperator> || <relationOperator> || <aggregatOperator>
     
     
//  Dokumentstufen : Dokumentstufen verändern die Anzahl der Dokumente im Dokumentenstrom der
//                   Pipeline
//
//  <documentOperator>: $match || $sort || $unwind || $limit || $out


// Stukturstufen: Mit Strukturstufen kann die Struktur



// -- ---------------------------------------------------------------------------------------- -- 
// --  2.Beispiel) DocumentOperator - $match, $out
// -- ---------------------------------------------------------------------------------------- --
// Sammeln Sie alle "RESEARCH_FUNDING_PROJECT" Projekte die von der "TU Wien" gefördert werden,
// in einer Collection projectReport.
// 

db.projects.find({});



db.projects.aggregate([
   {
       $match : {
           projectType : "RESEARCH_FUNDING_PROJECT",
           fundings : {
               $elemMatch : {
                  debitorName : "TU Wien"   
               }   
           }
       }  
   }, {
       $out : "projectReport"
   }
]);


// -- ---------------------------------------------------------------------------------------- -- 
// --  3.Beispiel) DocumentOperator - $limit, $skip
// -- ---------------------------------------------------------------------------------------- --
// Sammeln Sie die ersten 5 Projekte in einer Collection projectReport.

db.projects.aggregate([
   {   
      $sort : {
         title : 1
      }
   }, {   
      $limit : 5
   }, {
      $out : "projectReport"   
   }
]);


// -- ---------------------------------------------------------------------------------------- -- 
// --  4.Beispiel) StrukturOperator - $project, $addFields
// -- ---------------------------------------------------------------------------------------- --
// Sammeln Sie alle REQUEST_FUNDING_PROJECT bzw. RESEARCH_FUNDING_PROJECT Projekte in einer
// Collection projectReport. Berücksichtigen Sie nur Projekte mit 2 oder mehreren subprojekten

// Geben Sie die folgenden Felder aus:
//    skalare Felder:      title, projectType, projectState
//    neue Felder:         projectDescription
//    konstante Felder:    marked
//    aggregierte Felder:  subprojectAmount, projectFunding, minReview, maxReview
//    Transformationen:    subprojects (array of titles)

db.projects.find({});

db.projects.aggregate([
   {
      $match : {
          projectType : { $in : ["REQUEST_FUNDING_PROJECT", "RESEARCH_FUNDING_PROJECT"] },          
      }
   }, {
      $project : {
          // skalare Felder
          title : 1,
          projectType : 1,
          projectState: 1,
          
          // neue Felder
          projectDescription : "$description",
          
          // konstante Werte:
          marked : true,
          
          // aggregierte Felder
          subprojectAmount : {
              $size : "$subprojects"   
          },
          projectFunding : {
             $sum : "$fundings.amount"   
          },
          minReview : {
              $min : "$reviews"   
          },
          maxReview : {
              $max : "$reviews"   
          },         
          
          // Transformationen
          subproject : "$subprojects.title"
      }
   }, {
      $match : {
          subprojectAmount : { $gte : 2 }   
      }
   }, {
      $out : "projectReport"   
   }
]);


// -- ---------------------------------------------------------------------------------------- -- 
// --  5.Beispiel) StrukturOperator - $lookup, $unwind, $addFields
// -- ---------------------------------------------------------------------------------------- --
// Sammeln Sie für Debitoren folgende Daten in der debitorReport Collection.

// debitorName, projects, fundingAmount, supportedProjects, fundedProjects

db.debitors.find({});

db.debitors.aggregate([
   {
      $project : {
         debitorName : "$name",
         fundingAmount : {
             $sum : "$fundings.amount"
         },
         supportedProjects : "$fundings.projectName",
         fundedProjects : {
            $size : "$fundings"   
         }
      } 
   }, {
      $out : "debitorReport"
   }
]);


// -- ---------------------------------------------------------------------------------------- -- 
// --  6.Beispiel) StrukturOperator - $lookup, $unwind, $addFields
// -- ---------------------------------------------------------------------------------------- --
// Sammeln Sie folgenden Daten für Subprojekte in einer Collection subprojectReports. 

// subprojectTitle, projectTitle, facility, median, researchValues, subprojectFunding,
// projectFunding


db.projects.find({});
db.subprojects.find({});

db.subprojects.aggregate([
    {
       $lookup : {
           from : "projects",
           localField   : "project._id",
           foreignField : "_id",
           as : "projectData"   
       }    
    } , { 
       $project : {
           projectTitle : "$project.title",
           subprojectTitle : "$title",
           facility : "$facility.name",
           researchValues : [ 
              "$appliedResearch", "$focusResearch", "$theoreticalResearch"
           ],
           subprojectFunding : "$funding.amount",
           projectFunding : "$projectData"
       }
    }, {    
       $unwind : "$projectFunding"
    }, { 
       $addFields : {
           projectFunding : {
               $sum : "$projectFunding.fundings.amount"
           }
       }
    }, { 
        $out: "subprojectReport"
    }
]);




// -- ---------------------------------------------------------------------------------------- -- 
// --  7.Beispiel) Aggregatoperatoren: $group
// -- ---------------------------------------------------------------------------------------- --
// Ermitteln Sie welchem Projekttyp wieviele Projektdokumente zugeordnet sind.  Speichern Sie
// die Daten in der projectReport Collection. Speichern Sie ebenfalls die Titel der den
// Projekttypen zugeordneten Dokumente.

db.projects.aggregate([
   {
      $group : {
         _id : "$projectType",
         documentCount : {
             $sum : 1   
         },
         title : {
             $push : "$title"   
         }
      } 
   }, {
      $out : "projectReport"
   }
]);


// -- ---------------------------------------------------------------------------------------- -- 
// --  8.Beispiel) Aggregatoperatoren: $bucket
// -- ---------------------------------------------------------------------------------------- --
// Bilden Sie für die projects Collection folgende Buckets. Speichern Sie pro Bucket folgende 
// Daten: fundingAmount, title

// $bucket:   projectFunding:     0 - 20.000    20.001 - 50.000    

db.projects.find({});

db.projects.aggregate([
    {
       $project : {
           title : 1,
           fundingAmount : {
               $sum : "$fundings.amount"   
           }
       } 
    }, {
       $bucket : {  
           groupBy : "$fundingAmount",
           boundaries : [0,20001, 50001, 2000000],
           output : {
              count : { $sum : 1 },
              title : { 
                  $push : {
                      title : "$title",
                      fundingAmount : "$fundingAmount"
                  } 
              }
           }
       }
    }, {
       $out : "projectReport"
    }
]);
