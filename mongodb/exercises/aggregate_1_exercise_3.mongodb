use insy;
 // -- --------------------------------------------------------------------------------- --
// --  1.Beispiel) Aggregationsframework: $match, $project, $sort, $out (1.Punkt)
// -- --------------------------------------------------------------------------------- --
// Sammeln Sie die folgenden Eventdaten in der "eventsReport" Collection. Berücksichtigen
// Sie nur Battles. Für das Event muß zumindestens ein Review abgegeben worden sein.


// Ausgabe: eventName, battleVictor, description, maxReview

// @eventName     -> name
// @battelVictor  -> victor
// @description   -> description

// Sortieren Sie das Ergebnis nach dem Eventnamen aufsteigend.
// Übernehmen Sie nur die ersten 2 Dokumente.


// Hinweis: Prüfung ob das review Array Elemente hat:

//  reviews : {
//       $exists : true, $not : { $size : 0 }   
// }

db.events.find({});

db.events.aggregate([
    {
        $match: {
            eventType:"BATTLE",
            reviews:{
                $exists: true
            }
        }
    },
    {
        /**
         * specifications: The fields to
         *   include or exclude.
         */
        $project: {
            $eventName: "$name",
            battleVictor: "$victor",
            description: "$description"
        }
    }, {
        /**
         * Provide the number of documents to limit.
         */
        $limit: 2
    }, {
        $out:"eventReport"
    }
]);



// -- --------------------------------------------------------------------------------- --
// --  2.Beispiel) Aggregationsframework - $group, $out                     (1.Punkt)
// -- --------------------------------------------------------------------------------- --
// Geben Sie für jeden eventType folgende Werte aus. Speichern Sie Ihr Ergebnis in einer
// Collection eventReport

// { 
//    "_id" : "BATTLE", 
//    "documentCount" : ..., @Anzahl der Dokumente für den eventType
//    "eventNames" : [
//        {
//            "name" : "Battle of ...", 
//            "victor" : "..."
//        }, ...
//     ]
//  }

db.events.find({});

db.events.aggregate([{
    $group: {
      _id: "$eventType",
      documentCount: {
          $sum: 1
      },
      eventNames: {
          $addToSet: {
              name: "$name",
              victor: "$victor"
          }
      }
    }, {
        $out: "eventReport"
    }
}]);

// -- --------------------------------------------------------------------------------- --
// --  3.Beispiel) Aggregationsframework - $match, $unwind, $addFields, $group, $lookup
// --                                    - $project, $out              
// --  (3.Punkte)
// -- --------------------------------------------------------------------------------- --

// Sammeln Sie für events die folgenden Daten in der eventReport collection. Berück-
// sichtigen Sie nur BATTLE eventTypes.
//
// eventType, description, territorialChange, belligerents
//
// @name        -> name
// @eventType   -> eventType
// @description -> description
// @territorialChange -> territorialChange
// @belligerents : [{
//     commander : "...",
//     nation : "...",
//     troopCount : -> $sum composition.amount
//     troopTypes : ["...", "..."]
//     lossCount  : -> $sum losses.amount
// }]


// Hinweis: Zur Berechung der Werte der gegnerischen Seiten (belligerents)
//          sollte eine "$unwind" auf dem Array durchgeführt werden.

db.events.find({});

db.events.aggregate([{
    $match: {
        eventType: "BATTLE"
    }}, {
        $unwind: "$belligerents"
    },{
        project: {
            name: 1,
            eventType: 1,
            description: 1,
            territorialChange: 1,
            "belligerents.commander": 1,
            "belligerents.nation": 1,
            "belligerents.troopCount": {
                $sum: "$belligerents.composition.amount"
            },
            "belligerents.troopTypes": "$belligerents.composition.type",
            "belligerents.lossCount": {
                $sum: "$belligereents.losses.amount"
    }}},{
        $group: {
            _id: "$_id",
            belligereents: {
                $addToSet: "$belligerents"
    }}},{
        $lookup: {
            from: "events",
            localField: "_id",
            foreignField: "_id",
            as: "temp"
    }},{
        $unwind: "$temp"
    },{
        $project: {
            name: "$temp.name",
            eventType:"$temp.name",
            description:"$temp.description",
            territorialChanges: "$temp.terrotorialChange",
            belligerents: 1
    }},{
        $out: "eventReport2"
}]);

db.personalities.find();
db.personalities.aggregate